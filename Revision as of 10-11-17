#include "Calculation.h"
#include <string>
#include <iostream>
#include <cmath>
#include <stack>
#include <sstream> // istringstream 
using namespace std;

const string Calculation::OPERATORS = "UR-!^/*%D+GL<>N=&|()";
const int Calculation::PRECEDENCE[] = { 8, 8, 8, 8, 7, 6, 6, 6, 5, 5, 4, 4, 4, 4, 3, 3, 2, 1, 0, 0 };

bool Calculation::is_operator(char ch) const {
	return OPERATORS.find(ch) != string::npos;
}

int Calculation::precedence(char op) const
{
	return PRECEDENCE[OPERATORS.find(op)];
}

int Calculation::eval_expression(const string& expression)
{
	while (!operatorStack.empty())
		operatorStack.pop();
	while (!operatorStack.empty())
		operandStack.pop();
	istringstream tokens(expression);
	char nextChar;
	int previousEntry = -1;					
	int operandSuccessionCount = 0;
	int evaluationBefore = 0;
	int charCount = 0;
	bool operandMissing = true;
	while (tokens >> nextChar){
		if (isblank(nextChar))
			break;
		else
			charCount++;
		if (isdigit(nextChar)){
			if (operandSuccessionCount == 1)
				throw std::exception("Two Operands in a row @ char: " + charCount);
			else{
				tokens.putback(nextChar);
				int value;
				tokens >> value;
				operandStack.push(value);
				evaluationBefore++;
				operandSuccessionCount++;
				operandMissing = false;
				previousEntry = 1;				
			}
		}
		else if (is_operator(nextChar)){
			nextChar = processOperator(nextChar, evaluationBefore, previousEntry);
			if ((nextChar == '(') || (operatorStack.empty()) || operandMissing)
			if (nextChar == ')')
				throw std::exception("Expression can't start with a closing parenthesis");
			else
				operatorStack.push(nextChar);
			else if ((precedence(nextChar) < precedence(operatorStack.top()) || (nextChar == ')'))){
				while (!operatorStack.empty() && (operatorStack.top() != '(') && (precedence(nextChar) <= precedence(operatorStack.top())))
					operatorEval(precedence(operatorStack.top()));
				if (nextChar != ')'){
					operatorStack.push(nextChar);
				}
				else
					evaluationBefore = 1;
				if (!operatorStack.empty() && operatorStack.top() == '(')
					operatorStack.pop();
			}
			else{
				evaluationBefore = 0;
				operatorStack.push(nextChar);
			}
			operandSuccessionCount = 0;
			previousEntry = -1;				

		}
		else {
			throw std::exception("Invalid Character");			// Added to check for any invalid characters input
		}
	}
	while (!operatorStack.empty())
		operatorEval(precedence(operatorStack.top()));
	int answer;
	if (operandStack.size() >= 2 && operatorStack.empty()) {				// When 2 or more operand and no operator left
		throw std::exception("Operand Stack has " + operandStack.size());
	}
	else if (operandStack.size() == 1 && operatorStack.size() > 0){			// when 1 operand but 1 or more operator 
		throw std::exception("operator stack has " + operatorStack.size());
	}
	else {
		answer = operandStack.top();
		operandStack.pop();										// Before return pop top of the stack
		return answer;
	}
}

char Calculation::processOperator(char op, int opSuccession, int previousEntry)
{
	if ((opSuccession == 1 && op == '-')){
		return 'D';
	}
	else if (!operatorStack.empty() && operatorStack.top() == '!' && op == '='){
		operatorStack.pop();
		return'N';
	}
	else if (!operatorStack.empty() && operatorStack.top() == '>' && op == '='){
		operatorStack.pop();
		return'G';
	}
	else if (!operatorStack.empty() && operatorStack.top() == '<' && op == '='){
		operatorStack.pop();
		return'L';
	}
	else if (!operatorStack.empty() && (operatorStack.top() == '-' || operatorStack.top() == 'D') && op == '-' && previousEntry == -1){
		operatorStack.pop();
		return 'R';
	}
	else if (!operatorStack.empty() && (operatorStack.top() == '+') && op == '+' && previousEntry == -1){
		operatorStack.pop();
		return 'U';
	}
	else
		return op;
}

void Calculation::operatorEval(int prec)
{
	int calculation;
	int lhs;
	int rhs;
	switch (prec)
	{
	case 8:
		if (operatorStack.top() == 'U')
		{
			calculation = operandStack.top();
			operandStack.pop();
			calculation++;
			operandStack.push(calculation);
			operatorStack.pop();
		}
		else if (operatorStack.top() == '!')
		{
			if (operandStack.top() != 0)
			{
				operatorStack.pop();
				operandStack.push(0);
			}
			else
			{
				operatorStack.pop();
				operandStack.push(1);
			}
		}
		else if (operatorStack.top() == 'R')
		{
			calculation = operandStack.top();
			operandStack.pop();
			calculation--;
			operandStack.push(calculation);
			operatorStack.pop();
		}
		else if (operatorStack.top() == '-')
		{
			calculation = operandStack.top();
			operandStack.pop();
			calculation = calculation * -1;
			operandStack.push(calculation);
			operatorStack.pop();
		}
		break;
	case 7:
		rhs = operandStack.top();
		operandStack.pop();
		lhs = operandStack.top();
		operandStack.pop();
		calculation = pow(lhs, rhs);
		operatorStack.pop();
		operandStack.push(calculation);
		break;
	case 6:
		if (operatorStack.top() == '*')
		{
			rhs = operandStack.top();
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
			calculation = lhs * rhs;
			operatorStack.pop();
			operandStack.push(calculation);
			break;
		}
		else if (operatorStack.top() == '/')
		{
			rhs = operandStack.top();
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
			calculation = lhs / rhs;
			operatorStack.pop();
			operandStack.push(calculation);
			break;
		}
		else if (operatorStack.top() == '%')
		{
			rhs = operandStack.top();
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
			calculation = lhs % rhs;
			operatorStack.pop();
			operandStack.push(calculation);
		}
		break;
	case 5:
		if (operatorStack.top() == 'D')
		{
			rhs = operandStack.top();
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
			calculation = lhs - rhs;
			operatorStack.pop();
			operandStack.push(calculation);
		}
		else if (operatorStack.top() == '+')
		{
			rhs = operandStack.top();
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
			calculation = lhs + rhs;
			operatorStack.pop();
			operandStack.push(calculation);
		}
		break;
	case 4:
		if (operandStack.size() >= 2) {				// if size of operand stack >= we can make a comparison if not throw error
			rhs = operandStack.top();
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
		}
		else { throw std::exception("Expression Can't Start or end with a binary operator"); }		// error thrown
		if (operatorStack.top() == 'G')
		{
			if (lhs >= rhs)
				operandStack.push(1);
			else operandStack.push(0);
		}
		else if (operatorStack.top() == 'L')
		{
			if (lhs <= rhs)
				operandStack.push(1);
			else operandStack.push(0);
		}
		else if (operatorStack.top() == '>')
		{
			if (lhs > rhs)
				operandStack.push(1);
			else operandStack.push(0);
		}
		else if (operatorStack.top() == '<')
		{
			if (lhs < rhs)
				operandStack.push(1);
			else operandStack.push(0);
		}
		operatorStack.pop();
		
		break;
	case 3:
		if (operandStack.size() >= 2) {				// If size of operandStack >= 2 We can make a comparison
			rhs = operandStack.top();				// if operand stack only have 1 item before we need to make a comparison throw error
			operandStack.pop();
			lhs = operandStack.top();
			operandStack.pop();
		}	
		else { throw std::exception("Expression Can't start or end with a binary operator"); }			// error thrown
		if (operatorStack.top() == 'N')
		{
			if (lhs != rhs)
				operandStack.push(1);
			else
				operandStack.push(0);
		}
		else if (operatorStack.top() == '=')
		{
			if (lhs == rhs)
				operandStack.push(1);
			else
				operandStack.push(0);
			//operatorStack.pop();				// Don't need this because
		}
		operatorStack.pop();					// Already have this here!
		break;
	case 2:
		rhs = operandStack.top();
		operandStack.pop();
		lhs = operandStack.top();
		operandStack.pop();
		if (lhs && rhs)
			operandStack.push(1);
		else
			operandStack.push(0);
		operatorStack.pop();
		operatorStack.pop();
		break;
	case 1:
		rhs = operandStack.top();
		operandStack.pop();
		lhs = operandStack.top();
		operandStack.pop();
		if (lhs || rhs)
			operandStack.push(1);
		else
			operandStack.push(0);
		operatorStack.pop();
		operatorStack.pop();
		break;
	case 0:
		operatorStack.pop();
		break;
	}
}
